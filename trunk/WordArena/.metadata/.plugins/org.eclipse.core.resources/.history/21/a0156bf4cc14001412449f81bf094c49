package com.slamdunk.toolkit.world;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.ParticleEffect;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.slamdunk.toolkit.drawers.AnimationDrawer;
import com.slamdunk.toolkit.drawers.ParticleDrawer;
import com.slamdunk.toolkit.drawers.TextureDrawer;
import com.slamdunk.toolkit.settings.SlamViewportSettings;

public class SlamActor extends Actor {

	/**
	 * Objet gérant le dessin d'une texture simple
	 */
	private TextureDrawer textureDrawer;
	
	/**
	 * Objet gérant les animations
	 */
	private AnimationDrawer animationDrawer;

	/**
	 * Objet gérant les particules
	 */
	private ParticleDrawer particleDrawer;

	public SlamActor(TextureRegion textureRegion, boolean isTextureRegionActive,
			float posX, float posY,
			float orgnX, float orgnY,
			float width, float height) {
		super();
		textureDrawer.setTextureRegion(textureRegion);
		textureDrawer.setActive(isTextureRegionActive);
		setBounds(posX, posY, width, height);
		setPosition(posX, posY);
		setSize(width, height);
		setOrigin(orgnX, orgnY);
	}

	public SlamActor(TextureRegion textureRegion,
			boolean isTextureRegionActive, float posX, float posY, float width,
			float height) {
		super();
		textureDrawer.setTextureRegion(textureRegion);
		textureDrawer.setActive(isTextureRegionActive);
		setBounds(posX, posY, width, height);
		setPosition(posX, posY);
		setSize(width, height);
	}

	public SlamActor(float posX, float posY, float width, float height) {
		super();
		setBounds(posX, posY, width, height);
		setPosition(posX, posY);
		setSize(width, height);
	}

	public SlamActor(float width, float height, boolean DIPActive) {
		super();
		if (DIPActive) {
			float ratioSize = SlamViewportSettings.getWorldSizeRatio();
			setSize(width * ratioSize, height * ratioSize);
		} else {
			setSize(width, height);
		}
	}

	public SlamActor() {
		super();
	}

	@Override
	public void act(float delta) {
		super.act(delta);
		animationDrawer.updateTime(delta);
	}

	@Override
	public void draw(SpriteBatch batch, float parentAlpha) {
		super.draw(batch, parentAlpha);
		
		// Pour l'effet de fade in/out
		batch.setColor(this.getColor().r, this.getColor().g, this.getColor().b, parentAlpha * this.getColor().a);

		// Dessine la texture si elle est définie
		textureDrawer.draw(this, batch);

		// Dessine les animations (principale et temporaire)
		animationDrawer.draw(this, batch);
		

		// Dessine les particules
		particleDrawer.draw(this, batch);
	}

	/**
	 * Translate actor in a direction of speed without stopping. Actor moves in
	 * constants speed set without acceleration
	 * 
	 * @param speedX
	 *            axis-X speed
	 * @param speedY
	 *            axis-Y speed
	 * @param delta
	 *            the delta time for accurate speed
	 * */
	public void translateWithoutAcc(float speedX, float speedY, float delta) {
		setPosition(getX() + (speedX * delta), getY() + (speedY * delta));
	}

	/**
	 * Retourne la texture dessinée pour cet acteur
	 * 
	 * @return TextureRegion
	 * 
	 */
	public TextureRegion getTextureRegion() {
		return textureRegion;
	}

	/**
	 * Définit la texture dessinée pour cet acteur. Elle ne sera dessinée
	 * que si elle n'est pas nulle et qu'elle est active.
	 * @param textureRegion
	 * @param isTextureRegionActive
	 * */
	public void setTextureRegion(TextureRegion textureRegion, boolean isActive) {
		this.textureRegion = textureRegion;
		this.isTextureRegionActive = isTextureRegionActive;
	}

	/**
	 * Retourne l'animator de cet acteur
	 * @return animator
	 */
	public AnimationDrawer getAnimationDrawer() {
		return animationDrawer;
	}

	/**
	 * Get particle for this actor
	 * */
	public ParticleEffect getParticleEffect() {
		return particleEffect;
	}

	/**
	 * Set particle for this actor, centerPosition is used to center the
	 * particle on this actor sizes
	 * */
	public void setParticleEffect(ParticleEffect particleEffect,
			boolean isParticleEffectActive, boolean isStart,
			boolean centerPosition) {
		this.particleEffect = particleEffect;
		this.isParticleEffectActive = isParticleEffectActive;
		if (!centerPosition) {
			this.particleEffect.setPosition(getX(), getY());
		} else {
			particlePosX = getWidth() / 2.0f;
			particlePosY = getHeight() / 2.0f;
			this.particleEffect.setPosition(getX() + particlePosX, getY()
					+ particlePosY);
		}

		if (isStart) {
			this.particleEffect.start();
		}
	}

	/**
	 * Set particle position
	 * */
	public void setParticlePositionXY(float x, float y) {
		particlePosX = x;
		particlePosY = y;
	}

	/**
	 * Check if particle active
	 * */
	public boolean isParticleEffectActive() {
		return isParticleEffectActive;
	}

	/**
	 * Set particle active to draw or not
	 * */
	public void setParticleEffectActive(boolean isParticleEffectActive) {
		this.isParticleEffectActive = isParticleEffectActive;
	}
}
